let express,PORT,success,ApolloServer,typeDefs,resolvers,bodyparser,connect_DB,cors,join,AppModels,AuthMiddleware,schemaDirectives;_4bd‍.w("express",[["default",["express"],function(v){express=v}]]);_4bd‍.w("./config",[["PORT",["PORT"],function(v){PORT=v}]]);_4bd‍.w("consola",[["success",["success"],function(v){success=v}]]);_4bd‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_4bd‍.w("./graphql/typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_4bd‍.w("./graphql/resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_4bd‍.w("body-parser",[["default",["bodyparser"],function(v){bodyparser=v}]]);_4bd‍.w("./db",[["default",["connect_DB"],function(v){connect_DB=v}]]);_4bd‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_4bd‍.w("path",[["join",["join"],function(v){join=v}]]);_4bd‍.w("./models/",[["*",null,function(v){AppModels=v}]]);_4bd‍.w("./middlewares/auth",[["default",["AuthMiddleware"],function(v){AuthMiddleware=v}]]);_4bd‍.w("./graphql/directives",[["schemaDirectives",["schemaDirectives"],function(v){schemaDirectives=v}]]);












const port = PORT;
const app = express();
app.use(cors());
app.use(bodyparser.json({ limit: "20mb" }));
_4bd‍.g.console.log(join(__dirname, "..", "uploads"));
app.use(AuthMiddleware);
app.use("/uploads", express.static(join(__dirname, "..", "uploads")));
const startApp = () => {
  connect_DB();
  const server = new ApolloServer({
    resolvers,
    typeDefs,
    schemaDirectives,
    context: ({ req }) => {
      let { isAuth, user } = req;
      return {
        req,
        user,
        isAuth,
        ...AppModels,
      };
    },
  });
  server.applyMiddleware({ app });
  app.listen(port, () => {
    success({
      message: `Server is running at port ${port}`,
      badge: true,
    });
  });
};

startApp();
